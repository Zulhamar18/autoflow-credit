{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zulham\\\\autoflow-credit\\\\autoflow-credit-frontend\\\\src\\\\WalletBalance.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WalletBalance({\n  walletAddress\n}) {\n  _s();\n  const [balance, setBalance] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (!walletAddress) return;\n    async function fetchBalance() {\n      try {\n        // Gunakan provider default dari ethers (connect ke Ethereum mainnet)\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n\n        // Ambil balance (dalam wei)\n        const balanceWei = await provider.getBalance(walletAddress);\n\n        // Konversi ke Ether (atau USDC nanti)\n        const balanceEther = ethers.utils.formatEther(balanceWei);\n        setBalance(balanceEther);\n      } catch (err) {\n        setError(\"Gagal mengambil balance: \" + err.message);\n      }\n    }\n    fetchBalance();\n\n    // Optional: refresh balance setiap 15 detik\n    const interval = setInterval(fetchBalance, 15000);\n    return () => clearInterval(interval);\n  }, [walletAddress]);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n      children: \"Wallet Balance:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), \" \", balance === null ? \"Loading...\" : `${balance} ETH`]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(WalletBalance, \"cv2d9SLduO6u/u62fn8qEPl3iBc=\");\n_c = WalletBalance;\nexport default WalletBalance;\nvar _c;\n$RefreshReg$(_c, \"WalletBalance\");","map":{"version":3,"names":["React","useEffect","useState","ethers","jsxDEV","_jsxDEV","WalletBalance","walletAddress","_s","balance","setBalance","error","setError","fetchBalance","provider","providers","Web3Provider","window","ethereum","balanceWei","getBalance","balanceEther","utils","formatEther","err","message","interval","setInterval","clearInterval","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Zulham/autoflow-credit/autoflow-credit-frontend/src/WalletBalance.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nfunction WalletBalance({ walletAddress }) {\r\n  const [balance, setBalance] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!walletAddress) return;\r\n\r\n    async function fetchBalance() {\r\n      try {\r\n        // Gunakan provider default dari ethers (connect ke Ethereum mainnet)\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n\r\n        // Ambil balance (dalam wei)\r\n        const balanceWei = await provider.getBalance(walletAddress);\r\n\r\n        // Konversi ke Ether (atau USDC nanti)\r\n        const balanceEther = ethers.utils.formatEther(balanceWei);\r\n\r\n        setBalance(balanceEther);\r\n      } catch (err) {\r\n        setError(\"Gagal mengambil balance: \" + err.message);\r\n      }\r\n    }\r\n\r\n    fetchBalance();\r\n\r\n    // Optional: refresh balance setiap 15 detik\r\n    const interval = setInterval(fetchBalance, 15000);\r\n    return () => clearInterval(interval);\r\n  }, [walletAddress]);\r\n\r\n  if (error) return <div style={{ color: \"red\" }}>{error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <strong>Wallet Balance:</strong>{\" \"}\r\n      {balance === null ? \"Loading...\" : `${balance} ETH`}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WalletBalance;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,aAAaA,CAAC;EAAEC;AAAc,CAAC,EAAE;EAAAC,EAAA;EACxC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,aAAa,EAAE;IAEpB,eAAeM,YAAYA,CAAA,EAAG;MAC5B,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAS,CAACC,YAAY,CAACC,MAAM,CAACC,QAAQ,CAAC;;QAEnE;QACA,MAAMC,UAAU,GAAG,MAAML,QAAQ,CAACM,UAAU,CAACb,aAAa,CAAC;;QAE3D;QACA,MAAMc,YAAY,GAAGlB,MAAM,CAACmB,KAAK,CAACC,WAAW,CAACJ,UAAU,CAAC;QAEzDT,UAAU,CAACW,YAAY,CAAC;MAC1B,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZZ,QAAQ,CAAC,2BAA2B,GAAGY,GAAG,CAACC,OAAO,CAAC;MACrD;IACF;IAEAZ,YAAY,CAAC,CAAC;;IAEd;IACA,MAAMa,QAAQ,GAAGC,WAAW,CAACd,YAAY,EAAE,KAAK,CAAC;IACjD,OAAO,MAAMe,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACnB,aAAa,CAAC,CAAC;EAEnB,IAAII,KAAK,EAAE,oBAAON,OAAA;IAAKwB,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAM,CAAE;IAAAC,QAAA,EAAEpB;EAAK;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAE7D,oBACE9B,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAA0B,QAAA,EAAQ;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAAC,GAAG,EACnC1B,OAAO,KAAK,IAAI,GAAG,YAAY,GAAG,GAAGA,OAAO,MAAM;EAAA;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChD,CAAC;AAEV;AAAC3B,EAAA,CAvCQF,aAAa;AAAA8B,EAAA,GAAb9B,aAAa;AAyCtB,eAAeA,aAAa;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}