import type { Account, Chain, Client, FallbackTransport, HttpTransport, PublicActions, WalletActions } from '@bigmi/core';
/**
 * Get an instance of a provider for a specific chain
 * @param chainId - Id of the chain the provider is for
 * @returns The public client for the given chain
 */
export declare const getUTXOPublicClient: (chainId: number) => Promise<Client<FallbackTransport<readonly HttpTransport[]>, Chain, Account | undefined, [{
    Method: "getblockcount";
    Parameters: [];
    ReturnType: number;
}, {
    Method: "getblockhash";
    Parameters: [number];
    ReturnType: string;
}, {
    Method: "getblock";
    Parameters: [string, number];
    ReturnType: string;
}, {
    Method: "getblockstats";
    Parameters: [string | number, Array<import("@bigmi/core").BlockStatsKeys>?];
    ReturnType: import("@bigmi/core").BlockStats;
}, {
    Method: "sendrawtransaction";
    Parameters: [string, number?];
    ReturnType: string;
}, {
    Method: "getrawtransaction";
    Parameters: [string, boolean, string?];
    ReturnType: import("@bigmi/core").UTXOTransaction;
}, {
    Method: "getBalance";
    Parameters: {
        address: string;
    };
    ReturnType: bigint;
}, {
    Method: "getTransactions";
    Parameters: {
        address: string;
        offset?: number;
        limit?: number;
        lastBlock?: string;
        afterTxId?: string;
    };
    ReturnType: {
        transactions: Array<Partial<import("@bigmi/core").UTXOTransaction>>;
        total: number;
        hasMore?: boolean;
    };
}, {
    Method: "getUTXOs";
    Parameters: {
        address: string;
        minValue?: number;
    };
    ReturnType: Array<import("@bigmi/core/dist/esm/types/transaction.js").UTXO>;
}], PublicActions & WalletActions>>;
//# sourceMappingURL=getUTXOPublicClient.d.ts.map